#include<iostream>

using namespace std;

class Node{
    public:
        Node *left;
        Node *right;
        int data;
        int height;
        Node(int data){
            left=NULL;
            right=NULL;
            this->data=data;
            height=0;
        }
};

Node *root=NULL;

int getHeight(Node *cur){
    int left;
    int right;
    if(cur && cur->left){
        left=cur->height;
    }
    else{
        left=0;
    }
    if(cur && cur->right){
        right=cur->height;
    }
    else{
        right=0;
    }
    if(left>right){
        return left+1;
    }
    else{
        return right+1;
    }
}

int balanceFactor(Node *cur){
    int left;
    int right;
    if(cur && cur->left){
        left=cur->left->height;
    }
    else{
        left=0;
    }
    if(cur && cur->right){
        right=cur->right->height;
    }
    else{
        right=0;
    }
    return left-right;
}

Node *llrotation(Node *cur){
    Node *l=cur->left;
    Node *lr=l->right;
    
    l->right=cur;
    cur->left=lr;
    cur->height=getHeight(cur);
    l->height=getHeight(l);

    if(root==cur){
        root=l;
    }

    return l;
}

Node *rrrotation(Node *cur){
   Node *r=cur->right;
   Node *rl=r->left;

   r->left=cur;
   cur->right=rl;
   cur->height=getHeight(cur);
   r->height=getHeight(r);

    if(root==cur){
        root=r;
    }

    return r;
}

Node *lrrotation(Node *cur){
    Node *l=cur->left;
    Node *lr=l->right;

    l->right=lr->left;
    cur->left=lr->right;

    lr->left=l;
    lr->right=cur;

    l->height=getHeight(l);
    cur->height=getHeight(cur);
    lr->height=getHeight(lr);

    if(root==cur){
        root=lr;
    }

    return lr;
}

Node *rlrotation(Node *cur){
    Node *r=cur->right;
    Node *rl=r->left;

    r->left=rl->right;
    cur->right=rl->left;

    rl->right=r;
    rl->left=cur;

    r->height=getHeight(r);
    cur->height=getHeight(cur);
    rl->height=getHeight(rl);

    if(root==cur){
        root=rl;
    }

    return rl;
}

Node* insert(Node *cur, int data){
    Node *temp=NULL;

    if(!cur){
        temp=new Node(data);
        temp->height=1;
        return temp;
    }
    if(data<cur->data){
        cur->left=insert(cur->left, data);
    }
    else if(data>cur->data){
        cur->right=insert(cur->right, data);
    }
    cur->height=getHeight(cur);

    if(balanceFactor(cur)==2 && balanceFactor(cur->left)==1){ //LL Rotation
        return llrotation(cur);
    }
    else if(balanceFactor(cur)==2 && balanceFactor(cur->left)==-1){ //LR Rotation
        return lrrotation(cur);
    }
    else if(balanceFactor(cur)==-2 && balanceFactor(cur->right)==-1){ //RR Rotation
        return rrrotation(cur);
    }
    else if(balanceFactor(cur)==-2 && balanceFactor(cur->right)==1){ //RL Rotation
        return rlrotation(cur);
    }
    return cur;
}

void search(Node *root, int data){
    while(root){
        if(root->data==data){
            cout<<"Element is found"<<endl;
            return;
        }
        if(data>root->data && root->right){
            root=root->right;
        }
        else{
            root=root->left;
        }
    }
    cout<<"Element not found"<<endl;
    return;
}

Node *pre(Node *cur){
    while(cur && cur->right){
        cur=cur->right;
    }
    return cur;
}

Node *suc(Node *cur){
    while(cur && cur->left){
        cur=cur->right;
    }
    return cur;
}

Node *deleteval(Node *cur, int data){
    Node *temp;

    if(!cur){
        return NULL;
    }

    if(!cur->left && !cur->right){
        if(root==cur){
            root=NULL;
        }
        delete(cur);
        return NULL;
    }

    if(data<cur->data){
        cur->left=deleteval(cur->left, data);
    }
    else if(data>cur->data){
        cur->right=deleteval(cur->right, data);
    }
    else{
        temp=suc(cur);
        cur->data=temp->data;
        cur->right=deleteval(root->right, temp->data);
    }
    cur->height=getHeight(cur);
    if(balanceFactor(cur)==2 && balanceFactor(cur->left)==1){ //LL Rotation
        return llrotation(cur);
    }
    else if(balanceFactor(cur)==2 && balanceFactor(cur->left)==-1){ //LR Rotation
        return lrrotation(cur);
    }
    else if(balanceFactor(cur)==-2 && balanceFactor(cur->right)==-1){ //RR Rotation
        return rrrotation(cur);
    }
    else if(balanceFactor(cur)==-2 && balanceFactor(cur->right)==1){ //RL Rotation
        return rlrotation(cur);
    }
    return cur;
}

void preOrder(Node *cur){
	if(!cur){
		return;
	}
	cout<<cur->data<<" ";
	preOrder(cur->left);
	preOrder(cur->right);
}

void postOrder(Node *cur){
	if(!cur){
		return;
	}
	postOrder(cur->left);
	postOrder(cur->right);
	cout<<cur->data<<" ";
}

void inOrder(Node *cur){
	if(!cur){
		return;
	}
	inOrder(cur->left);
	cout<<cur->data<<" ";
	inOrder(cur->right);
}

int main(){
    root=insert(root, 55);
    insert(root, 66);
    insert(root, 77);
    insert(root, 11);
    insert(root, 33);
    insert(root, 22);
    insert(root, 35);
    insert(root, 25);
    insert(root, 44);
    insert(root, 88);
    insert(root, 99);

    search(root, 66);
    search(root, 22);
    search(root, 44);
    search(root, 27);
   
    deleteval(root, 35);
    deleteval(root, 99);

    preOrder(root);
    cout<<endl;
    postOrder(root);
    cout<<endl;
    inOrder(root);
}
